import QtQuick
import QtQuick.Controls
import QtQuick.Controls.Material
import QtQuick.Layouts

Rectangle {
    id: root
    color: Material.background

    Connections {
        target: backtestModel
        function onBacktestComplete() {
            resultsGroup.visible = true
        }
        function onErrorOccurred(message) {
            errorLabel.text = message
            errorLabel.visible = true
        }
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 16
        spacing: 16

        // Header
        Label {
            text: "Backtest"
            font.pixelSize: 24
            font.weight: Font.Medium
        }

        // Error message
        Label {
            id: errorLabel
            visible: false
            color: Material.Red
            font.pixelSize: 14
            wrapMode: Text.WordWrap
            Layout.fillWidth: true
        }

        // Configuration section
        GroupBox {
            title: "Backtest Configuration"
            Layout.fillWidth: true
            Material.elevation: 2

            ColumnLayout {
                anchors.fill: parent
                spacing: 16

                // Pair selection
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 16

                    Label {
                        text: "Trading Pair:"
                        font.pixelSize: 14
                    }

                    TextField {
                        id: coin1Field
                        placeholderText: "BTC"
                        Layout.preferredWidth: 100
                        onEditingFinished: backtestModel.updateAvailableData(coin1Field.text, coin2Field.text, timeframeCombo.currentText)
                    }

                    Label {
                        text: "/"
                        font.pixelSize: 14
                    }

                    TextField {
                        id: coin2Field
                        placeholderText: "ETH"
                        Layout.preferredWidth: 100
                        onEditingFinished: backtestModel.updateAvailableData(coin1Field.text, coin2Field.text, timeframeCombo.currentText)
                    }

                    Item { Layout.fillWidth: true }
                }

                // Timeframe + Date range combined
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 16

                    Label {
                        text: "Timeframe:"
                        font.pixelSize: 14
                    }

                    ComboBox {
                        id: timeframeCombo
                        model: ["5min", "1hour", "4hour"]
                        currentIndex: 1
                        Layout.preferredWidth: 120
                        onCurrentTextChanged: backtestModel.updateAvailableData(coin1Field.text, coin2Field.text, timeframeCombo.currentText)
                    }

                    Label {
                        text: backtestModel.dataAvailable ?
                              "Data: " + backtestModel.dataStartDate + " to " + backtestModel.dataEndDate +
                              " (" + backtestModel.dataPointCount + " candles)" :
                              (coin1Field.text && coin2Field.text ? "No data available" : "")
                        font.pixelSize: 13
                        opacity: 0.7
                        Layout.fillWidth: true
                        visible: text !== ""
                    }
                }

                // Strategy selection
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 16

                    Label {
                        text: "Strategy:"
                        font.pixelSize: 14
                    }

                    ComboBox {
                        id: strategyCombo
                        model: [
                            "Z-Score + RSI",
                            "Pure Z-Score",
                            "Z-Score + Stochastic",
                            "Divergence Detection"
                        ]
                        currentIndex: 0
                        Layout.preferredWidth: 200

                        property var strategyIds: ["z_rsi", "pure_z", "z_stoch", "divergence"]
                        property string currentStrategy: strategyIds[currentIndex]
                    }

                    Item { Layout.fillWidth: true }
                }

                // Parameter controls
                GridLayout {
                    Layout.fillWidth: true
                    columns: 2
                    rowSpacing: 12
                    columnSpacing: 16

                    // Z-Threshold
                    Label {
                        text: "Z-Score Threshold: " + zThresholdSlider.value.toFixed(1)
                        font.pixelSize: 13
                    }

                    Slider {
                        id: zThresholdSlider
                        from: 1.5
                        to: 3.0
                        value: 2.0
                        stepSize: 0.1
                        Layout.fillWidth: true
                    }

                    // RSI Period
                    Label {
                        text: "RSI Period: " + rsiPeriodSlider.value
                        font.pixelSize: 13
                    }

                    Slider {
                        id: rsiPeriodSlider
                        from: 10
                        to: 20
                        value: 14
                        stepSize: 1
                        Layout.fillWidth: true
                    }

                    // Window Size
                    Label {
                        text: "Window Size: " + windowSizeSlider.value
                        font.pixelSize: 13
                    }

                    Slider {
                        id: windowSizeSlider
                        from: 20
                        to: 40
                        value: 30
                        stepSize: 5
                        Layout.fillWidth: true
                    }
                }

                // Action buttons
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 16

                    Button {
                        text: backtestModel.isRunning ? "Cancel" : "Run Backtest"
                        highlighted: !backtestModel.isRunning
                        enabled: !backtestModel.isRunning && backtestModel.dataAvailable

                        ToolTip.visible: hovered && !backtestModel.dataAvailable && coin1Field.text && coin2Field.text
                        ToolTip.text: "No data available. Click 'Force Refresh' in status bar to populate database."
                        onClicked: {
                            if (backtestModel.isRunning) {
                                backtestModel.cancel()
                            } else {
                                errorLabel.visible = false
                                resultsGroup.visible = false
                                backtestModel.runBacktest(
                                    coin1Field.text || "BTC",
                                    coin2Field.text || "ETH",
                                    backtestModel.dataStartDate,
                                    backtestModel.dataEndDate,
                                    timeframeCombo.currentText,
                                    strategyCombo.currentStrategy,
                                    zThresholdSlider.value,
                                    Math.round(rsiPeriodSlider.value),
                                    Math.round(windowSizeSlider.value)
                                )
                            }
                        }
                    }

                    Button {
                        text: "Optimize Parameters"
                        enabled: !backtestModel.isRunning && backtestModel.dataAvailable

                        ToolTip.visible: hovered && !backtestModel.dataAvailable && coin1Field.text && coin2Field.text
                        ToolTip.text: "No data available. Click 'Force Refresh' in status bar to populate database."
                        onClicked: {
                            errorLabel.visible = false
                            resultsGroup.visible = false
                            backtestModel.optimizeParameters(
                                coin1Field.text || "BTC",
                                coin2Field.text || "ETH",
                                backtestModel.dataStartDate,
                                backtestModel.dataEndDate,
                                timeframeCombo.currentText
                            )
                        }
                    }

                    Item { Layout.fillWidth: true }
                }
            }
        }

        // Progress indicator
        ProgressBar {
            Layout.fillWidth: true
            visible: backtestModel.isRunning
            indeterminate: true
        }

        // Results section
        GroupBox {
            id: resultsGroup
            title: "Backtest Results"
            Layout.fillWidth: true
            Layout.fillHeight: true
            Material.elevation: 2
            visible: false

            ScrollView {
                anchors.fill: parent
                clip: true

                ColumnLayout {
                    width: parent.width
                    spacing: 16

                    // Results cards
                    GridLayout {
                        Layout.fillWidth: true
                        columns: 4
                        rowSpacing: 16
                        columnSpacing: 16

                        // Total Return
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.preferredWidth: 200
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.fill: parent
                                anchors.margins: 8
                                spacing: 4

                                Label {
                                    text: "TOTAL RETURN"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                    wrapMode: Text.NoWrap
                                    elide: Text.ElideRight
                                }

                                Label {
                                    text: backtestModel.results.total_return ? backtestModel.results.total_return.toFixed(2) + "%" : "0.00%"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    color: (backtestModel.results.total_return || 0) > 0 ? Material.Green : Material.Red
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                    wrapMode: Text.NoWrap
                                }
                            }
                        }

                        // Sharpe Ratio
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.preferredWidth: 200
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.fill: parent
                                anchors.margins: 8
                                spacing: 4

                                Label {
                                    text: "SHARPE RATIO"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.sharpe_ratio ? backtestModel.results.sharpe_ratio.toFixed(2) : "0.00"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Max Drawdown
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "MAX DRAWDOWN"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.max_drawdown ? backtestModel.results.max_drawdown.toFixed(2) + "%" : "0.00%"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    color: Material.Red
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Win Rate
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "WIN RATE"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.win_rate ? backtestModel.results.win_rate.toFixed(1) + "%" : "0.0%"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Total Trades
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "TOTAL TRADES"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.total_trades ? backtestModel.results.total_trades.toString() : "0"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Profitable Trades
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "PROFITABLE TRADES"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.profitable_trades ? backtestModel.results.profitable_trades.toString() : "0"
                                    font.pixelSize: 24
                                    font.weight: Font.Bold
                                    color: Material.Green
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Avg Trade Duration
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "AVG TRADE DURATION"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.avg_trade_duration ? backtestModel.results.avg_trade_duration.toFixed(1) + " days" : "0.0 days"
                                    font.pixelSize: 20
                                    font.weight: Font.Bold
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }

                        // Avg Profit per Trade
                        Rectangle {
                            Layout.fillWidth: true
                            height: 100
                            color: Qt.rgba(1, 1, 1, 0.05)
                            radius: 8
                            border.width: 1
                            border.color: Qt.rgba(1, 1, 1, 0.12)

                            ColumnLayout {
                                anchors.centerIn: parent
                                spacing: 4

                                Label {
                                    text: "AVG PROFIT PER TRADE"
                                    font.pixelSize: 11
                                    font.capitalization: Font.AllUppercase
                                    opacity: 0.7
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }

                                Label {
                                    text: backtestModel.results.avg_profit_per_trade ? "$" + backtestModel.results.avg_profit_per_trade.toFixed(2) : "$0.00"
                                    font.pixelSize: 20
                                    font.weight: Font.Bold
                                    color: (backtestModel.results.avg_profit_per_trade || 0) > 0 ? Material.Green : Material.Red
                                    horizontalAlignment: Text.AlignHCenter
                                    Layout.fillWidth: true
                                }
                            }
                        }
                    }

                    // Equity curve placeholder
                    Rectangle {
                        Layout.fillWidth: true
                        height: 300
                        color: Qt.rgba(1, 1, 1, 0.05)
                        radius: 8
                        border.width: 1
                        border.color: Qt.rgba(1, 1, 1, 0.12)
                        Layout.topMargin: 16

                        Label {
                            anchors.centerIn: parent
                            text: "Equity curve chart coming soon..."
                            font.pixelSize: 14
                            opacity: 0.5
                        }
                    }
                }
            }
        }

        // Empty state
        Label {
            text: "Configure backtest parameters and click 'Run Backtest' to begin"
            font.pixelSize: 16
            opacity: 0.5
            horizontalAlignment: Text.AlignHCenter
            Layout.fillWidth: true
            Layout.fillHeight: true
            visible: !backtestModel.isRunning && !resultsGroup.visible
        }
    }

    // Function to load pair from other pages
    function loadPair(coin1, coin2) {
        errorLabel.visible = false
        resultsGroup.visible = false

        // Populate pair fields
        coin1Field.text = coin1
        coin2Field.text = coin2

        // Trigger data availability check
        backtestModel.updateAvailableData(coin1, coin2, timeframeCombo.currentText)
    }
}
